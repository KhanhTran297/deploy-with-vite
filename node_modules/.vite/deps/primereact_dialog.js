import {
  DomHandler,
  ObjectUtils,
  Portal,
  PrimeReact,
  UniqueComponentId,
  ZIndexUtils,
  classNames,
  localeOption,
  useEventListener,
  useMountEffect,
  useUnmountEffect,
  useUpdateEffect
} from "./chunk-EZUAIZEF.js";
import {
  CSSTransition_default
} from "./chunk-7PTB757S.js";
import "./chunk-QHWSBPK4.js";
import "./chunk-TZHKOEH3.js";
import "./chunk-LMKMSGST.js";
import "./chunk-7PKFJE5B.js";
import "./chunk-TVUX6QIV.js";
import "./chunk-6K2CSZVE.js";
import "./chunk-KXMNDRCQ.js";
import "./chunk-KBFHYFJ6.js";
import {
  require_react
} from "./chunk-JFTBQ7A7.js";
import {
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/primereact/dialog/dialog.esm.js
var React3 = __toESM(require_react());

// node_modules/primereact/csstransition/csstransition.esm.js
var React = __toESM(require_react());
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var CSSTransitionBase = {
  defaultProps: {
    __TYPE: "CSSTransition",
    children: void 0
  },
  getProps: function getProps(props) {
    return ObjectUtils.getMergedProps(props, CSSTransitionBase.defaultProps);
  },
  getOtherProps: function getOtherProps(props) {
    return ObjectUtils.getDiffProps(props, CSSTransitionBase.defaultProps);
  }
};
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var CSSTransition = React.forwardRef(function(inProps, ref) {
  var props = CSSTransitionBase.getProps(inProps);
  var disabled = props.disabled || props.options && props.options.disabled || !PrimeReact.cssTransition;
  var onEnter = function onEnter2(node, isAppearing) {
    props.onEnter && props.onEnter(node, isAppearing);
    props.options && props.options.onEnter && props.options.onEnter(node, isAppearing);
  };
  var onEntering = function onEntering2(node, isAppearing) {
    props.onEntering && props.onEntering(node, isAppearing);
    props.options && props.options.onEntering && props.options.onEntering(node, isAppearing);
  };
  var onEntered = function onEntered2(node, isAppearing) {
    props.onEntered && props.onEntered(node, isAppearing);
    props.options && props.options.onEntered && props.options.onEntered(node, isAppearing);
  };
  var onExit = function onExit2(node) {
    props.onExit && props.onExit(node);
    props.options && props.options.onExit && props.options.onExit(node);
  };
  var onExiting = function onExiting2(node) {
    props.onExiting && props.onExiting(node);
    props.options && props.options.onExiting && props.options.onExiting(node);
  };
  var onExited = function onExited2(node) {
    props.onExited && props.onExited(node);
    props.options && props.options.onExited && props.options.onExited(node);
  };
  useUpdateEffect(function() {
    if (disabled) {
      var node = ObjectUtils.getRefElement(props.nodeRef);
      if (props["in"]) {
        onEnter(node, true);
        onEntering(node, true);
        onEntered(node, true);
      } else {
        onExit(node);
        onExiting(node);
        onExited(node);
      }
    }
  }, [props["in"]]);
  if (disabled) {
    return props["in"] ? props.children : null;
  } else {
    var immutableProps = {
      nodeRef: props.nodeRef,
      "in": props["in"],
      onEnter,
      onEntering,
      onEntered,
      onExit,
      onExiting,
      onExited
    };
    var mutableProps = {
      classNames: props.classNames,
      timeout: props.timeout,
      unmountOnExit: props.unmountOnExit
    };
    var mergedProps = _objectSpread(_objectSpread(_objectSpread({}, mutableProps), props.options || {}), immutableProps);
    return React.createElement(CSSTransition_default, mergedProps, props.children);
  }
});
CSSTransition.displayName = "CSSTransition";

// node_modules/primereact/ripple/ripple.esm.js
var React2 = __toESM(require_react());
var Ripple = React2.memo(React2.forwardRef(function() {
  var inkRef = React2.useRef(null);
  var targetRef = React2.useRef(null);
  var getTarget = function getTarget2() {
    return inkRef.current && inkRef.current.parentElement;
  };
  var bindEvents = function bindEvents2() {
    if (targetRef.current) {
      targetRef.current.addEventListener("mousedown", onMouseDown);
      DomHandler.isTouchDevice() && targetRef.current.addEventListener("touchstart", onTouchStart);
    }
  };
  var unbindEvents = function unbindEvents2() {
    if (targetRef.current) {
      targetRef.current.removeEventListener("mousedown", onMouseDown);
      DomHandler.isTouchDevice() && targetRef.current.removeEventListener("touchstart", onTouchStart);
    }
  };
  var onTouchStart = function onTouchStart2(event) {
    var offset = DomHandler.getOffset(targetRef.current);
    var offsetX = event.targetTouches[0].pageX - offset.left + document.body.scrollTop - DomHandler.getWidth(inkRef.current) / 2;
    var offsetY = event.targetTouches[0].pageY - offset.top + document.body.scrollLeft - DomHandler.getHeight(inkRef.current) / 2;
    activateRipple(offsetX, offsetY);
  };
  var onMouseDown = function onMouseDown2(event) {
    if (DomHandler.isTouchDevice()) {
      return;
    }
    var offset = DomHandler.getOffset(targetRef.current);
    var offsetX = event.pageX - offset.left + document.body.scrollTop - DomHandler.getWidth(inkRef.current) / 2;
    var offsetY = event.pageY - offset.top + document.body.scrollLeft - DomHandler.getHeight(inkRef.current) / 2;
    activateRipple(offsetX, offsetY);
  };
  var activateRipple = function activateRipple2(offsetX, offsetY) {
    if (!inkRef.current || getComputedStyle(inkRef.current, null).display === "none") {
      return;
    }
    DomHandler.removeClass(inkRef.current, "p-ink-active");
    if (!DomHandler.getHeight(inkRef.current) && !DomHandler.getWidth(inkRef.current)) {
      var d = Math.max(DomHandler.getOuterWidth(targetRef.current), DomHandler.getOuterHeight(targetRef.current));
      inkRef.current.style.height = d + "px";
      inkRef.current.style.width = d + "px";
    }
    inkRef.current.style.top = offsetY + "px";
    inkRef.current.style.left = offsetX + "px";
    DomHandler.addClass(inkRef.current, "p-ink-active");
  };
  var onAnimationEnd = function onAnimationEnd2(event) {
    DomHandler.removeClass(event.currentTarget, "p-ink-active");
  };
  useMountEffect(function() {
    if (inkRef.current) {
      targetRef.current = getTarget();
      bindEvents();
    }
  });
  useUpdateEffect(function() {
    if (inkRef.current && !targetRef.current) {
      targetRef.current = getTarget();
      bindEvents();
    }
  });
  useUnmountEffect(function() {
    if (inkRef.current) {
      targetRef.current = null;
      unbindEvents();
    }
  });
  return PrimeReact.ripple ? React2.createElement("span", {
    role: "presentation",
    ref: inkRef,
    className: "p-ink",
    onAnimationEnd
  }) : null;
}));
Ripple.displayName = "Ripple";

// node_modules/primereact/dialog/dialog.esm.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var DialogBase = {
  defaultProps: {
    __TYPE: "Dialog",
    appendTo: null,
    ariaCloseIconLabel: null,
    baseZIndex: 0,
    blockScroll: false,
    breakpoints: null,
    className: null,
    closable: true,
    closeOnEscape: true,
    contentClassName: null,
    contentStyle: null,
    dismissableMask: false,
    draggable: true,
    focusOnShow: true,
    footer: null,
    header: null,
    headerClassName: null,
    headerStyle: null,
    icons: null,
    id: null,
    keepInViewport: true,
    maskClassName: null,
    maskStyle: null,
    maximizable: false,
    maximized: false,
    minX: 0,
    minY: 0,
    modal: true,
    onClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragStart: null,
    onHide: null,
    onMaskClick: null,
    onMaximize: null,
    onResize: null,
    onResizeEnd: null,
    onResizeStart: null,
    onShow: null,
    position: "center",
    resizable: true,
    rtl: false,
    showHeader: true,
    style: null,
    transitionOptions: null,
    visible: false,
    children: void 0
  },
  getProps: function getProps2(props) {
    return ObjectUtils.getMergedProps(props, DialogBase.defaultProps);
  },
  getOtherProps: function getOtherProps2(props) {
    return ObjectUtils.getDiffProps(props, DialogBase.defaultProps);
  }
};
var Dialog = React3.forwardRef(function(inProps, ref) {
  var props = DialogBase.getProps(inProps);
  var uniqueId = props.id ? props.id : UniqueComponentId();
  var _React$useState = React3.useState(uniqueId), _React$useState2 = _slicedToArray(_React$useState, 2), idState = _React$useState2[0];
  _React$useState2[1];
  var _React$useState3 = React3.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), maskVisibleState = _React$useState4[0], setMaskVisibleState = _React$useState4[1];
  var _React$useState5 = React3.useState(false), _React$useState6 = _slicedToArray(_React$useState5, 2), visibleState = _React$useState6[0], setVisibleState = _React$useState6[1];
  var _React$useState7 = React3.useState(props.maximized), _React$useState8 = _slicedToArray(_React$useState7, 2), maximizedState = _React$useState8[0], setMaximizedState = _React$useState8[1];
  var dialogRef = React3.useRef(null);
  var maskRef = React3.useRef(null);
  var contentRef = React3.useRef(null);
  var headerRef = React3.useRef(null);
  var footerRef = React3.useRef(null);
  var closeRef = React3.useRef(null);
  var dragging = React3.useRef(false);
  var resizing = React3.useRef(false);
  var lastPageX = React3.useRef(null);
  var lastPageY = React3.useRef(null);
  var styleElement = React3.useRef(null);
  var attributeSelector = React3.useRef(uniqueId);
  var maximized = props.onMaximize ? props.maximized : maximizedState;
  var _useEventListener = useEventListener({
    type: "keydown",
    listener: function listener(event) {
      return onKeyDown(event);
    }
  }), _useEventListener2 = _slicedToArray(_useEventListener, 2), bindDocumentKeyDownListener = _useEventListener2[0], unbindDocumentKeyDownListener = _useEventListener2[1];
  var _useEventListener3 = useEventListener({
    type: "mousemove",
    target: function target() {
      return window.document;
    },
    listener: function listener(event) {
      return onResize(event);
    }
  }), _useEventListener4 = _slicedToArray(_useEventListener3, 2), bindDocumentResizeListener = _useEventListener4[0], unbindDocumentResizeListener = _useEventListener4[1];
  var _useEventListener5 = useEventListener({
    type: "mouseup",
    target: function target() {
      return window.document;
    },
    listener: function listener(event) {
      return onResizeEnd(event);
    }
  }), _useEventListener6 = _slicedToArray(_useEventListener5, 2), bindDocumentResizeEndListener = _useEventListener6[0], unbindDocumentResizEndListener = _useEventListener6[1];
  var _useEventListener7 = useEventListener({
    type: "mousemove",
    target: function target() {
      return window.document;
    },
    listener: function listener(event) {
      return onDrag(event);
    }
  }), _useEventListener8 = _slicedToArray(_useEventListener7, 2), bindDocumentDragListener = _useEventListener8[0], unbindDocumentDragListener = _useEventListener8[1];
  var _useEventListener9 = useEventListener({
    type: "mouseup",
    target: function target() {
      return window.document;
    },
    listener: function listener(event) {
      return onDragEnd(event);
    }
  }), _useEventListener10 = _slicedToArray(_useEventListener9, 2), bindDocumentDragEndListener = _useEventListener10[0], unbindDocumentDragEndListener = _useEventListener10[1];
  var onClose = function onClose2(event) {
    props.onHide();
    event.preventDefault();
  };
  var focus = function focus2() {
    var activeElement = document.activeElement;
    var isActiveElementInDialog = activeElement && dialogRef.current && dialogRef.current.contains(activeElement);
    if (!isActiveElementInDialog && props.closable && props.showHeader) {
      closeRef.current.focus();
    }
  };
  var onMaskClick = function onMaskClick2(event) {
    if (props.dismissableMask && props.modal && maskRef.current === event.target) {
      onClose(event);
    }
    props.onMaskClick && props.onMaskClick(event);
  };
  var toggleMaximize = function toggleMaximize2(event) {
    if (props.onMaximize) {
      props.onMaximize({
        originalEvent: event,
        maximized: !maximized
      });
    } else {
      setMaximizedState(function(prevMaximized) {
        return !prevMaximized;
      });
    }
    event.preventDefault();
  };
  var onKeyDown = function onKeyDown2(event) {
    var currentTarget = event.currentTarget;
    if (!currentTarget || !currentTarget.primeDialogParams) {
      return;
    }
    var params = currentTarget.primeDialogParams;
    var paramLength = params.length;
    var dialogId = params[paramLength - 1] ? params[paramLength - 1].id : void 0;
    if (dialogId !== idState) {
      return;
    }
    var dialog = document.getElementById(dialogId);
    if (props.closable && props.closeOnEscape && event.key === "Escape") {
      onClose(event);
      event.stopImmediatePropagation();
      params.splice(paramLength - 1, 1);
    } else if (event.key === "Tab") {
      event.preventDefault();
      var focusableElements = DomHandler.getFocusableElements(dialog);
      if (focusableElements && focusableElements.length > 0) {
        if (!document.activeElement) {
          focusableElements[0].focus();
        } else {
          var focusedIndex = focusableElements.indexOf(document.activeElement);
          if (event.shiftKey) {
            if (focusedIndex === -1 || focusedIndex === 0)
              focusableElements[focusableElements.length - 1].focus();
            else
              focusableElements[focusedIndex - 1].focus();
          } else {
            if (focusedIndex === -1 || focusedIndex === focusableElements.length - 1)
              focusableElements[0].focus();
            else
              focusableElements[focusedIndex + 1].focus();
          }
        }
      }
    }
  };
  var onDragStart = function onDragStart2(event) {
    if (DomHandler.hasClass(event.target, "p-dialog-header-icon") || DomHandler.hasClass(event.target.parentElement, "p-dialog-header-icon")) {
      return;
    }
    if (props.draggable) {
      dragging.current = true;
      lastPageX.current = event.pageX;
      lastPageY.current = event.pageY;
      dialogRef.current.style.margin = "0";
      DomHandler.addClass(document.body, "p-unselectable-text");
      props.onDragStart && props.onDragStart(event);
    }
  };
  var onDrag = function onDrag2(event) {
    if (dragging.current) {
      var width = DomHandler.getOuterWidth(dialogRef.current);
      var height = DomHandler.getOuterHeight(dialogRef.current);
      var deltaX = event.pageX - lastPageX.current;
      var deltaY = event.pageY - lastPageY.current;
      var offset = dialogRef.current.getBoundingClientRect();
      var leftPos = offset.left + deltaX;
      var topPos = offset.top + deltaY;
      var viewport = DomHandler.getViewport();
      dialogRef.current.style.position = "fixed";
      if (props.keepInViewport) {
        if (leftPos >= props.minX && leftPos + width < viewport.width) {
          lastPageX.current = event.pageX;
          dialogRef.current.style.left = leftPos + "px";
        }
        if (topPos >= props.minY && topPos + height < viewport.height) {
          lastPageY.current = event.pageY;
          dialogRef.current.style.top = topPos + "px";
        }
      } else {
        lastPageX.current = event.pageX;
        dialogRef.current.style.left = leftPos + "px";
        lastPageY.current = event.pageY;
        dialogRef.current.style.top = topPos + "px";
      }
      props.onDrag && props.onDrag(event);
    }
  };
  var onDragEnd = function onDragEnd2(event) {
    if (dragging.current) {
      dragging.current = false;
      DomHandler.removeClass(document.body, "p-unselectable-text");
      props.onDragEnd && props.onDragEnd(event);
    }
  };
  var onResizeStart = function onResizeStart2(event) {
    if (props.resizable) {
      resizing.current = true;
      lastPageX.current = event.pageX;
      lastPageY.current = event.pageY;
      DomHandler.addClass(document.body, "p-unselectable-text");
      props.onResizeStart && props.onResizeStart(event);
    }
  };
  var convertToPx = function convertToPx2(value, property, viewport) {
    !viewport && (viewport = DomHandler.getViewport());
    var val = parseInt(value);
    if (/^(\d+|(\.\d+))(\.\d+)?%$/.test(value)) {
      return val * (viewport[property] / 100);
    }
    return val;
  };
  var onResize = function onResize2(event) {
    if (resizing.current) {
      var deltaX = event.pageX - lastPageX.current;
      var deltaY = event.pageY - lastPageY.current;
      var width = DomHandler.getOuterWidth(dialogRef.current);
      var height = DomHandler.getOuterHeight(dialogRef.current);
      var offset = dialogRef.current.getBoundingClientRect();
      var viewport = DomHandler.getViewport();
      var hasBeenDragged = !parseInt(dialogRef.current.style.top) || !parseInt(dialogRef.current.style.left);
      var minWidth = convertToPx(dialogRef.current.style.minWidth, "width", viewport);
      var minHeight = convertToPx(dialogRef.current.style.minHeight, "height", viewport);
      var newWidth = width + deltaX;
      var newHeight = height + deltaY;
      if (hasBeenDragged) {
        newWidth += deltaX;
        newHeight += deltaY;
      }
      if ((!minWidth || newWidth > minWidth) && offset.left + newWidth < viewport.width) {
        dialogRef.current.style.width = newWidth + "px";
      }
      if ((!minHeight || newHeight > minHeight) && offset.top + newHeight < viewport.height) {
        dialogRef.current.style.height = newHeight + "px";
      }
      lastPageX.current = event.pageX;
      lastPageY.current = event.pageY;
      props.onResize && props.onResize(event);
    }
  };
  var onResizeEnd = function onResizeEnd2(event) {
    if (resizing.current) {
      resizing.current = false;
      DomHandler.removeClass(document.body, "p-unselectable-text");
      props.onResizeEnd && props.onResizeEnd(event);
    }
  };
  var resetPosition = function resetPosition2() {
    dialogRef.current.style.position = "";
    dialogRef.current.style.left = "";
    dialogRef.current.style.top = "";
    dialogRef.current.style.margin = "";
  };
  var getPositionClass = function getPositionClass2() {
    var positions = ["center", "left", "right", "top", "top-left", "top-right", "bottom", "bottom-left", "bottom-right"];
    var pos = positions.find(function(item) {
      return item === props.position || item.replace("-", "") === props.position;
    });
    return pos ? "p-dialog-".concat(pos) : "";
  };
  var onEnter = function onEnter2() {
    dialogRef.current.setAttribute(attributeSelector.current, "");
  };
  var onEntered = function onEntered2() {
    props.onShow && props.onShow();
    if (props.focusOnShow) {
      focus();
    }
    enableDocumentSettings();
  };
  var onExiting = function onExiting2() {
    if (props.modal) {
      DomHandler.addClass(maskRef.current, "p-component-overlay-leave");
    }
    if (props.blockScroll) {
      DomHandler.removeClass(document.body, "p-overflow-hidden");
    }
  };
  var onExited = function onExited2() {
    dragging.current = false;
    ZIndexUtils.clear(maskRef.current);
    setMaskVisibleState(false);
    disableDocumentSettings();
  };
  var enableDocumentSettings = function enableDocumentSettings2() {
    bindGlobalListeners();
    if (props.blockScroll || props.maximizable && maximized) {
      DomHandler.addClass(document.body, "p-overflow-hidden");
    }
  };
  var disableDocumentSettings = function disableDocumentSettings2() {
    unbindGlobalListeners();
    var isMaximized = props.maximizable && maximized;
    if (props.modal) {
      var hasBlockScroll = document.primeDialogParams && document.primeDialogParams.some(function(param) {
        return param.hasBlockScroll;
      });
      if (hasBlockScroll || isMaximized) {
        DomHandler.removeClass(document.body, "p-overflow-hidden");
      }
    } else if (props.blockScroll || isMaximized) {
      DomHandler.removeClass(document.body, "p-overflow-hidden");
    }
  };
  var bindGlobalListeners = function bindGlobalListeners2() {
    if (props.draggable) {
      bindDocumentDragListener();
      bindDocumentDragEndListener();
    }
    if (props.resizable) {
      bindDocumentResizeListener();
      bindDocumentResizeEndListener();
    }
    bindDocumentKeyDownListener();
    var newParam = {
      id: idState,
      hasBlockScroll: props.blockScroll
    };
    document.primeDialogParams = document.primeDialogParams ? [].concat(_toConsumableArray(document.primeDialogParams), [newParam]) : [newParam];
  };
  var unbindGlobalListeners = function unbindGlobalListeners2() {
    unbindDocumentDragListener();
    unbindDocumentDragEndListener();
    unbindDocumentResizeListener();
    unbindDocumentResizEndListener();
    unbindDocumentKeyDownListener();
    document.primeDialogParams = document.primeDialogParams && document.primeDialogParams.filter(function(param) {
      return param.id !== idState;
    });
  };
  var createStyle = function createStyle2() {
    styleElement.current = DomHandler.createInlineStyle(PrimeReact.nonce);
    var innerHTML = "";
    for (var breakpoint in props.breakpoints) {
      innerHTML += "\n                @media screen and (max-width: ".concat(breakpoint, ") {\n                    .p-dialog[").concat(attributeSelector.current, "] {\n                        width: ").concat(props.breakpoints[breakpoint], " !important;\n                    }\n                }\n            ");
    }
    styleElement.current.innerHTML = innerHTML;
  };
  var changeScrollOnMaximizable = function changeScrollOnMaximizable2() {
    if (!props.blockScroll) {
      var funcName = maximized ? "addClass" : "removeClass";
      DomHandler[funcName](document.body, "p-overflow-hidden");
    }
  };
  useMountEffect(function() {
    if (props.visible) {
      setMaskVisibleState(true);
    }
    if (props.breakpoints) {
      createStyle();
    }
  });
  useUpdateEffect(function() {
    if (props.visible && !maskVisibleState) {
      setMaskVisibleState(true);
    }
    if (props.visible !== visibleState && maskVisibleState) {
      setVisibleState(props.visible);
    }
  });
  useUpdateEffect(function() {
    if (maskVisibleState) {
      ZIndexUtils.set("modal", maskRef.current, PrimeReact.autoZIndex, props.baseZIndex || PrimeReact.zIndex["modal"]);
      setVisibleState(true);
    }
  }, [maskVisibleState]);
  useUpdateEffect(function() {
    changeScrollOnMaximizable();
  }, [props.maximized, maximizedState]);
  useUnmountEffect(function() {
    disableDocumentSettings();
    DomHandler.removeInlineStyle(styleElement.current);
    ZIndexUtils.clear(maskRef.current);
  });
  React3.useImperativeHandle(ref, function() {
    return {
      props,
      resetPosition,
      getElement: function getElement() {
        return dialogRef.current;
      },
      getMask: function getMask() {
        return maskRef.current;
      },
      getContent: function getContent() {
        return contentRef.current;
      },
      getHeader: function getHeader() {
        return headerRef.current;
      },
      getFooter: function getFooter() {
        return footerRef.current;
      },
      getCloseButton: function getCloseButton() {
        return closeRef.current;
      }
    };
  });
  var createCloseIcon = function createCloseIcon2() {
    if (props.closable) {
      var ariaLabel = props.ariaCloseIconLabel || localeOption("close");
      return React3.createElement("button", {
        ref: closeRef,
        type: "button",
        className: "p-dialog-header-icon p-dialog-header-close p-link",
        "aria-label": ariaLabel,
        onClick: onClose
      }, React3.createElement("span", {
        className: "p-dialog-header-close-icon pi pi-times",
        "aria-hidden": "true"
      }), React3.createElement(Ripple, null));
    }
    return null;
  };
  var createMaximizeIcon = function createMaximizeIcon2() {
    var iconClassName = classNames("p-dialog-header-maximize-icon pi", {
      "pi-window-maximize": !maximized,
      "pi-window-minimize": maximized
    });
    if (props.maximizable) {
      return React3.createElement("button", {
        type: "button",
        className: "p-dialog-header-icon p-dialog-header-maximize p-link",
        onClick: toggleMaximize
      }, React3.createElement("span", {
        className: iconClassName
      }), React3.createElement(Ripple, null));
    }
    return null;
  };
  var createHeader = function createHeader2() {
    if (props.showHeader) {
      var closeIcon = createCloseIcon();
      var maximizeIcon = createMaximizeIcon();
      var icons = ObjectUtils.getJSXElement(props.icons, props);
      var header = ObjectUtils.getJSXElement(props.header, props);
      var headerId = idState + "_header";
      var headerClassName = classNames("p-dialog-header", props.headerClassName);
      return React3.createElement("div", {
        ref: headerRef,
        style: props.headerStyle,
        className: headerClassName,
        onMouseDown: onDragStart
      }, React3.createElement("div", {
        id: headerId,
        className: "p-dialog-title"
      }, header), React3.createElement("div", {
        className: "p-dialog-header-icons"
      }, icons, maximizeIcon, closeIcon));
    }
    return null;
  };
  var createContent = function createContent2() {
    var className = classNames("p-dialog-content", props.contentClassName);
    var contentId = idState + "_content";
    return React3.createElement("div", {
      id: contentId,
      ref: contentRef,
      className,
      style: props.contentStyle
    }, props.children);
  };
  var createFooter = function createFooter2() {
    var footer = ObjectUtils.getJSXElement(props.footer, props);
    return footer && React3.createElement("div", {
      ref: footerRef,
      className: "p-dialog-footer"
    }, footer);
  };
  var createResizer = function createResizer2() {
    if (props.resizable) {
      return React3.createElement("span", {
        className: "p-resizable-handle",
        style: {
          zIndex: 90
        },
        onMouseDown: onResizeStart
      });
    }
    return null;
  };
  var createElement4 = function createElement5() {
    var otherProps = DialogBase.getOtherProps(props);
    var className = classNames("p-dialog p-component", props.className, {
      "p-dialog-rtl": props.rtl,
      "p-dialog-maximized": maximized,
      "p-dialog-default": !maximized,
      "p-input-filled": PrimeReact.inputStyle === "filled",
      "p-ripple-disabled": PrimeReact.ripple === false
    });
    var maskClassName = classNames("p-dialog-mask", getPositionClass(), {
      "p-component-overlay p-component-overlay-enter": props.modal,
      "p-dialog-visible": maskVisibleState,
      "p-dialog-draggable": props.draggable,
      "p-dialog-resizable": props.resizable
    }, props.maskClassName);
    var header = createHeader();
    var content = createContent();
    var footer = createFooter();
    var resizer = createResizer();
    var headerId = idState + "_header";
    var contentId = idState + "_content";
    var transitionTimeout = {
      enter: props.position === "center" ? 150 : 300,
      exit: props.position === "center" ? 150 : 300
    };
    return React3.createElement("div", {
      ref: maskRef,
      style: props.maskStyle,
      className: maskClassName,
      onClick: onMaskClick
    }, React3.createElement(CSSTransition, {
      nodeRef: dialogRef,
      classNames: "p-dialog",
      timeout: transitionTimeout,
      "in": visibleState,
      options: props.transitionOptions,
      unmountOnExit: true,
      onEnter,
      onEntered,
      onExiting,
      onExited
    }, React3.createElement("div", _extends({
      ref: dialogRef,
      id: idState,
      className,
      style: props.style,
      onClick: props.onClick,
      role: "dialog"
    }, otherProps, {
      "aria-labelledby": headerId,
      "aria-describedby": contentId,
      "aria-modal": props.modal
    }), header, content, footer, resizer)));
  };
  var createDialog = function createDialog2() {
    var element = createElement4();
    return React3.createElement(Portal, {
      element,
      appendTo: props.appendTo,
      visible: true
    });
  };
  return maskVisibleState && createDialog();
});
Dialog.displayName = "Dialog";
export {
  Dialog
};
//# sourceMappingURL=primereact_dialog.js.map
